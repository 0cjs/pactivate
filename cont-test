#!/usr/bin/env bash
#
#   cont-test - run within a container to test pactivate
#

#   This is important not just for our test script here, but to make sure
#   that pactivate itself runs when sourced under these conditions.
set -eu -o pipefail

trap 'fail "Unexpected exit"' 0

####################################################################
#   Definitions and Functions

ve=.build/virtualenv
bsve=.build/bootstrap/virtualenv

fail() { trap '' 0; echo FAILURE: "$@"; exit 1; }

####################################################################
#   Tests

cd /test/

echo '━━━━━ error when run with /bin/sh'
/bin/sh   ./pactivate 2>err-sh   && fail "didn't fail when run with /bin/sh"
grep -q 'source.*with Bash' err-sh || { cat err-sh; fail "bad message"; }

echo '━━━━━ error when run with /bin/bash'
/bin/bash ./pactivate 2>err-bash && fail "didn't fail when run with /bin/bash"
grep -q 'source.*with Bash' err-bash || { cat err-bash; fail "bad message"; }

echo '━━━━━ unknown argument error'
. ./pactivate xyz 2>err-args && fail "didn't fail for bad arg"
grep -q 'Unknown argument: xyz' err-args \
    || { cat err-args; fail "bad message"; }

echo '━━━━━ run pactivate 1st time'
(. ./pactivate)
[[ -x $bsve/pip ]] || fail "not executable: $bsve/pip"
[[ -d $bsve/virtualenv/ ]] || fail "not a dir: $bsve/virtualenv/"
$ve/bin/pip --version || fail "pip --version didn't work"

echo '━━━━━ run pactivate 2nd time'
(. ./pactivate && pip --version) || fail "pip --version didn't work"

echo '━━━━━ run pactivate with options'
mkdir -p /test/alt/build
echo 'pyyaml>=5' > /test/alt/requirements.txt
(. ./pactivate -b /test/alt/build -q &&
    /test/alt/build/virtualenv/bin/python -c 'import yaml') \
    || fail "yaml not installed from requirements.txt"

trap '' 0   # Turn off "Unexpected exit" failure
