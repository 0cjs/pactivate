#!/usr/bin/env bash
#
#   cont-test - run within a container to test pactivate
#

#   This is important not just for our test script here, but to make sure
#   that pactivate itself runs when sourced under these conditions.
set -eu -o pipefail

fail() { trap '' 0; echo FAILURE: "$@"; exit 1; }
trap 'fail "Unexpected exit"' 0

####################################################################
#   Definitions and Functions

pactivate="./pactivate ${QUIET_TEST:+-q}"
ve=/test/.build/virtualenv
bsve=/test/.build/bootstrap/pactivate

####################################################################
#   Tests

cd /test/

echo '━━━━━ error when run with /bin/sh'
/bin/sh   $pactivate 2>err-sh   && fail "didn't fail when run with /bin/sh"
grep -q 'source.*with Bash' err-sh || { cat err-sh; fail "bad message"; }

echo '━━━━━ error when run with /bin/bash'
/bin/bash $pactivate 2>err-bash && fail "didn't fail when run with /bin/bash"
grep -q 'source.*with Bash' err-bash || { cat err-bash; fail "bad message"; }

echo '━━━━━ unknown argument error'
. $pactivate xyz 2>err-args && fail "didn't fail for bad arg"
grep -q 'unknown argument: xyz' err-args \
    || { cat err-args; fail "bad message"; }

echo '━━━━━ run pactivate clean'
#   This does the full bootstrap and virtualenv creation
(. $pactivate)
[[ -x $bsve/pip ]] || fail "not executable: $bsve/pip"
[[ -d $bsve/virtualenv/ ]] || fail "not a dir: $bsve/virtualenv/"
$ve/bin/pip --version || fail "pip --version didn't work"

echo '━━━━━ run pactivate installed'
#   This should do nothing but run the existing virtualenv's activate
(. $pactivate && pip --version) || fail "pip --version didn't work"

echo '━━━━━ run pactivate with options'
altbase=/test2/base; mkdir -p $altbase
ln -s /usr/bin/python2 $altbase/.python
echo 'pyyaml>=5' > $altbase/requirements.txt
(cd /tmp && . /test/pactivate -q -B $altbase -b /test2/build) \
    || fail "build failure"
echo '───── testing build'
/test2/build/virtualenv/bin/python -c 'import yaml' \
    || fail "yaml import failure; requirements.txt broken?"
(. /test/pactivate -q -B $altbase -b /test2/build \
    && v=$(python -c \
      'from platform import *; print("{}.{}".format(*python_version_tuple()))')\
    && echo "version: $v" \
    && [[ $v == 2.7 ]]) || fail "wrong Python version: expected 2.7"

trap '' 0   # Turn off "Unexpected exit" failure
